import os
from aiogram import Bot, Router, F
from aiogram.filters import or_f
from aiogram.types import CallbackQuery, Message, LabeledPrice
from database.models import Products
from handlers.catalog.catalog_kb import category_kb, product_kb, product_kb_basket
from aiogram.fsm.context import FSMContext

from core.dictionary import *
from database.Database import DataBase
from handlers.start.start_kb import start_kb
from handlers.state.states import BuyStates, BasketStates


catalog_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog
@catalog_router.message(or_f(F.text == '/catalog', F.text == f'{start_catalog_text}'))
async def home_catalog(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await category_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@catalog_router.callback_query(F.data.startswith('select_category_'))
async def category_catalog(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split('_')[-1])
    db = DataBase()
    products = await db.get_product(category_id)
    if products:
        for product in products:
            # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await call.message.answer_photo(
                photo=product.images,
                caption=f"<b>{product.name}</b>\n\n"
                        f"{product.description}\n\n"
                        f"–¶–µ–Ω–∞ –∑–∞ —à—Ç: {product.price} —Ä—É–±.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}\n",
                reply_markup=await product_kb(product.id) if not await db.check_basket(call.from_user.id,
                                                                                       product.id) else product_kb_basket(
                    product.id)
            )
    else:
        await call.message.answer(f'{category_not_found}')
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫"
@catalog_router.callback_query(F.data.startswith('buy_one_'))
async def buy_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split('_')[-1])
    await state.set_state(BuyStates.ENTER_QUANTITY)
    await state.update_data(product_id=product_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@catalog_router.callback_query(F.data.startswith('add_basket_'))
async def add_basket(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.split('_')[-1])
    await state.set_state(BasketStates.ENTER_QUANTITY)
    await state.update_data(product_id=product_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
@catalog_router.message(BasketStates.ENTER_QUANTITY)
async def process_quantity_basket(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)
        data = await state.get_data()
        product_id = data.get('product_id')
        db = DataBase()
        product = await db.get_product_one(product_id)

        if product.quantity >= quantity:
            await db.add_basket(message.from_user.id, product_id, product.price, quantity)
            await state.clear()
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product.name} –≤ –∫–æ—Ä–∑–∏–Ω—É.üëç", reply_markup=start_kb())
        else:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {product.quantity} —à—Ç.\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ, —Å–∫–æ—Ä–æ –∑–∞–≤–µ–∑—É üòå")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=start_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è "–ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫"
@catalog_router.message(BuyStates.ENTER_QUANTITY)
async def process_quantity_buy_one(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)
        data = await state.get_data()
        product_id = data.get('product_id')
        db = DataBase()
        product = await db.get_product_one(product_id)

        if product.quantity >= quantity:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...")
            await message.bot.send_invoice(
                chat_id=message.from_user.id,
                title=f'–ö—É–ø–∏—Ç—å {product.name}',
                description=f'{product.description}',
                provider_token=os.getenv('TOKEN_YOUKASSA'),
                payload=f'product_{product_id}_{quantity}',  # –ü–µ—Ä–µ–¥–∞—ë–º ID —Ç–æ–≤–∞—Ä–∞ –∏ quantity
                currency='rub',
                prices=[
                    LabeledPrice(
                        label=f'–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞',
                        amount=int(product.price * quantity * 100)  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
                    )
                ],
                start_parameter='buy_one_click',
                provider_data=None,
                need_name=True,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                is_flexible=False,
                disable_notification=False,
                protect_content=False,
                reply_to_message_id=None,
                reply_markup=None,
                request_timeout=60
            )
            await state.clear()
        else:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {product.quantity} —à—Ç.\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ, —Å–∫–æ—Ä–æ –∑–∞–≤–µ–∑—É üòå")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=start_kb())




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@catalog_router.callback_query(F.data.startswith('delete_basket_'))
async def delete_basket(call: CallbackQuery):
    product_id = int(call.data.split('_')[-1])
    db = DataBase()
    product = await db.get_product_one(product_id)
    await db.delete_basket_one(product_id, call.from_user.id)
    await call.message.answer(f'–¢–æ–≤–∞—Ä {product.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
    await call.message.edit_reply_markup(reply_markup= await product_kb(product_id))
    await call.answer()

